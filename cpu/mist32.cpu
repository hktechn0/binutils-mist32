; mist32 architecture description.  -*- Scheme -*-
;
; Copyright 2011, 2012 Free Software Foundation, Inc.
; Contributed by Hirotaka Kawata <hirotaka@techno-st.net>
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

; Attributes

(define-arch
  (name mist32)
  (comment "Open Architecture mist32")
  (default-alignment forced)
  (insn-lsb0? #t)
  (machs mist32)
  (isas mist32)
)

(define-isa
  (name mist32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
  (decode-assist (30 29 28 27 26 25 24 23 22 21))
  (liw-insns 1)
  (parallel-insns 1)
)

(define-cpu
  (name mist32)
  (comment "mist32 base family")
  (endian big)
  (word-bitsize 32)
)

(define-mach
  (name mist32)
  (comment "Generic mist32 cpu")
  (cpu mist32)
)

(define-model
  (name mist32)
  (comment "mist32")
  (mach mist32)
  (unit u-exec "Execution Unit" ()
	1 1 ; issue done
	() ; state
	() ; inputs
	() ; outputs
	() ; profile action (default)
	)
)

; Instruction fields

(dnf f-ext   "extended bit"       () 31 1)
(dnf f-op    "opcode"             () 30 10)

(dnf f-isimm "immediate bit"      () 20 1)
(dnf f-afe   "afe"                () 19 4)
(dnf f-cc    "condition code"     () 19 4)

(dnf f-rd    "destination"        () 9 5)
(dnf f-rs    "source"             () 4 5)

(dnf  f-i11h "11 bit immediate high"       () 15 6)
(dnf  f-i11l "11 bit immediate low"        () 4 5)
(dnmf f-i11  "11 bit immediate"            () INT
      (f-i11h f-i11l)
      (sequence () ; insert
		(set (ifield f-i11h) (and (sra (ifield f-i11) (const 5))
					  (const #x3f)))
		(set (ifield f-i11l) (and (ifield f-i11) (const #x1f))))
      (sequence () ; extract
		(set (ifield f-i11) (sub (xor (const #x400)
					      (or (sll (ifield f-i11h) (const 5))
						  (ifield f-i11l)))
					 (const #x400))))
)
(dnmf f-ui11 "11 bit unsigned immediate"   () UINT
      (f-i11h f-i11l)
      (sequence () ; insert
		(set (ifield f-i11h) (srl (ifield f-ui11) (const 5)))
		(set (ifield f-i11l) (and (ifield f-ui11) (const #x1f))))
      (sequence () ; extract
		(set (ifield f-ui11) (or (sll (ifield f-i11h) (const 5))
					 (ifield f-i11l))))
)
(dnmf f-i11w "11 bit word align immediate" () INT
      (f-i11h f-i11l)
      (sequence () ; insert
		(set (ifield f-i11h) (and (sra (ifield f-i11w) (const 7))
					  (const #x3f)))
		(set (ifield f-i11l) (and (sra (ifield f-i11w) (const 2))
					  (const #x1f))))
      (sequence () ; extract
		(set (ifield f-i11w) (sub
				      (xor (const #x1000)
					   (or (sll (ifield f-i11h) (const 7))
					       (sll (ifield f-i11l) (const 2))))
				      (const #x1000))))
)

(dnf  f-p11hi "11 bit absolute address high"       (ABS-ADDR) 15 6)
(dnf  f-p11lo "11 bit absolute address low"        (ABS-ADDR) 4 5)
(dnmf f-p11b  "11 bit byte align absolute address" (ABS-ADDR) UINT
      (f-p11hi f-p11lo)
      (sequence () ; insert
		(set (ifield f-p11hi) (srl (ifield f-p11b) (const 5)))
		(set (ifield f-p11lo) (and (ifield f-p11b) (const #x1f))))
      (sequence () ; extract
		(set (ifield f-p11b) (or (sll (ifield f-p11hi) (const 5))
					 (ifield f-p11lo))))
)
(dnmf f-p11h "11 bit half-word align absolute address" (ABS-ADDR) UINT
      (f-p11hi f-p11lo)
      (sequence () ; insert
		(set (ifield f-p11hi) (srl (ifield f-p11h) (const 6)))
		(set (ifield f-p11lo) (srl (and (ifield f-p11h) (const #x3e)) 
					   (const 1))))
      (sequence () ; extract
		(set (ifield f-p11h) (or (sll (ifield f-p11hi) (const 6))
					 (sll (ifield f-p11lo) (const 1)))))
)
(dnmf f-p11w "11 bit word align absolute address" (ABS-ADDR) UINT
      (f-p11hi f-p11lo)
      (sequence () ; insert
		(set (ifield f-p11hi) (srl (ifield f-p11w) (const 7)))
		(set (ifield f-p11lo) (and (srl (ifield f-p11w) (const 2))
					   (const #x1f))))
      (sequence () ; extract
		(set (ifield f-p11w) (or (sll (ifield f-p11hi) (const 7))
					 (sll (ifield f-p11lo) (const 2)))))
)

(dnf  f-i16h "16 bit immediate high"      () 20 11)
(dnf  f-i16l "16 bit immediate low"       () 4 5)
(dnmf f-i16  "16 bit immediate"           () INT
      (f-i16h f-i16l)
      (sequence () ; insert
		(set (ifield f-i16h) (and (sra (ifield f-i16) (const 5))
					  (const #x7ff)))
		(set (ifield f-i16l) (and (ifield f-i16) (const #x1f))))
      (sequence () ; extract
		(set (ifield f-i16) (sub (xor (const #x8000)
					      (or (sll (ifield f-i16h) (const 5))
						  (ifield f-i16l)))
					 (const #x8000))))
)
(dnmf f-ui16 "16 bit unsigned immediate"  () UINT
      (f-i16h f-i16l)
      (sequence () ; insert
		(set (ifield f-i16h) (srl (ifield f-ui16) (const 5)))
		(set (ifield f-i16l) (and (ifield f-ui16) (const #x1f))))
      (sequence () ; extract
		(set (ifield f-ui16) (or (sll (ifield f-i16h) (const 5))
					 (ifield f-i16l))))
)

(df  f-d6b  "6 bit byte displacement" ()
     15 6 INT
     ((value pc) (sra WI value (const 0)))
     ((value pc) (sll WI value (const 0)))
)
(dnf f-ud6b  "6 bit unsigned byte displacement" ()
     15 6
)
(df  f-d6h  "6 bit half-word displacement" ()
     15 6 INT
     ; 1 shiftned to right, 6bit -> 7bit
     ((value pc) (sra WI (and WI value (const -2)) (const 1)))
     ((value pc) (sll WI value (const 1)))
)
(df  f-ud6h "6 bit unsigned half-word displacement" ()
     15 6 UINT
     ; 1 shiftned to right, 6bit -> 7bit
     ((value pc) (srl WI (and WI value (const -2)) (const 1)))
     ((value pc) (sll WI value (const 1)))
)
(df  f-d6w  "6 bit word displacement" ()
     15 6 INT
     ; 2 shiftned to right, 6bit -> 8bit
     ((value pc) (sra WI (and WI value (const -4)) (const 2)))
     ((value pc) (sll WI value (const 2)))
)
(df  f-ud6w "6 bit unsigned word displacement" ()
     15 6 UINT
     ; 2 shiftned to right, 6bit -> 8bit
     ((value pc) (srl WI (and WI value (const -4)) (const 2)))
     ((value pc) (sll WI value (const 2)))
)

(dnf f-ci16  "16 bit immediate for C format" () 15 16)
(df  f-ci16w "16 bit word align immediate for C foramt" ()
     15 16 INT
     ; 2 shiftned to right, 16bit -> 18bit
     ((value pc) (sra WI (and WI value (const -4)) (const 2)))
     ((value pc) (sll WI value (const 2)))
)

(df f-p16 "16 bit absolute address" (ABS-ADDR)
    15 16 UINT
    ; 2 shifted to right, 16bit -> 18bit
    ((value pc) (srl WI (and WI pc (const -4)) (const 2)))
    ((value pc) (sll WI value (const 2)))
)
(df f-p16r "16 bit signed PC relative address" (PCREL-ADDR)
    15 16 INT
    ; 2 shifted to right, 16bit -> 18bit
    ((value pc) (sra WI (sub WI value (and WI pc (const -4))) (const 2)))
    ((value pc) (add WI (sll WI value (const 2)) (and WI pc (const -4))))
)
(df f-up16r "16 bit unsigned PC relative address" (PCREL-ADDR)
    15 16 UINT
    ; 2 shifted to right, 16bit -> 18bit
    ((value pc) (srl WI (sub WI value (and WI pc (const -4))) (const 2)))
    ((value pc) (add WI (sll WI value (const 2)) (and WI pc (const -4))))
)

(dnf f-reserve1 "reserved field"  (RESERVED) 15 6)
(dnf f-reserve2 "reserved field"  (RESERVED) 9 5)
(dnf f-reserve3 "reserved field"  (RESERVED) 4 5)

; Enums

(define-normal-insn-enum insn-ext "insn ext enums" () EXT_ f-ext
  ("0")
)
(define-normal-insn-enum insn-op1 "insn opcode enums" () OP_ f-op
  (.map .str (.iota 1024))
)
(define-normal-insn-enum insn-isimm "insn is immediate" () ISIMM_ f-isimm
  ("0" "1")
)
(define-normal-insn-enum insn-afe "insn afe enums" () AFE_ f-afe
  ("0")
)
(define-normal-insn-enum insn-disp "insn displacement enums" () DISP_ f-d6b
  ("0")
)

; Hardware

; hardware: register
(dnh h-pc "program counter" (PC) (pc SI) () () ())
(dnh h-gr "general registers" ()
     (register WI (32))
     (keyword "" ((rtmp 7) (rglobl 29) (rbase 30) (rret 31)
		  (r0 0) (r1 1) (r2 2) (r3 3)
		  (r4 4) (r5 5) (r6 6) (r7 7)
		  (r8 8) (r9 9) (r10 10) (r11 11)
		  (r12 12) (r13 13) (r14 14) (r15 15)
		  (r16 16) (r17 17) (r18 18) (r19 19)
		  (r20 20) (r21 21) (r22 22) (r23 23)
		  (r24 24) (r25 25) (r26 26) (r27 27)
		  (r28 28) (r29 29) (r30 30) (r31 31)))
     () ()
)

; hardware: immediate
(dnh h-int6   "6 bit int"   () (immediate (INT   6)) () () ())
(dnh h-uint6  "6 bit uint"  () (immediate (UINT  6)) () () ())
(dnh h-int11  "11 bit int"  () (immediate (INT  11)) () () ())
(dnh h-uint11 "11 bit uint" () (immediate (UINT 11)) () () ())
(dnh h-int16  "16 bit int"  () (immediate (INT  16)) () () ())
(dnh h-uint16 "16 bit uint" () (immediate (UINT 16)) () () ())

; hardware: condition code
(dnh h-cc "condition code" ()
     (register WI (16))
     (keyword "#" ((al #x0) 
		   (eq  #x1) (z  #x1)
		   (ne  #x2) (nz #x2) (neq #x2)
		             (mi #x3)
		             (pl #x4)
		             (en #x5)
		             (on #x6)
		             (of #x7)
		   (geu #x8) (c  #x8) (ueo #x8)
		   (ltu #x9) (nc #x9) (uu  #x9)
		   (gtu #xa)          (uo  #xa)
		   (leu #xb)          (ueu #xb)
		   (ge  #xc)          (seo #xc)
		   (lt  #xd)          (su  #xd)
		   (gt  #xe)          (so  #xe)
		   (le  #xf)          (seu #xf)))
     () ()
)

; Operands

(dnop rd    "destination register"            () h-gr     f-rd)
(dnop rs    "source register"                 () h-gr     f-rs)
(dnop cc    "condition code"                  () h-cc     f-cc)

(dnop d6b   "6bit byte displacement"          () h-int6   f-d6b)
(dnop ud6b  "6bit byte unsigned displacement" () h-uint6  f-ud6b)
(dnop d6h   "6bit half-word displacement"     () h-int6   f-d6h)
(dnop ud6h  "6bit half-word unsigned disp"    () h-uint6  f-ud6h)
(dnop d6w   "6bit word displacement"          () h-int6   f-d6w)
(dnop ud6w  "6bit word unsigned displacement" () h-uint6  f-ud6w)

(dnop i11   "11bit immediate"                 () h-int11  f-i11)
(dnop ui11  "11bit unsigned immediate"        () h-uint11 f-ui11)
(dnop i11w  "11bit word align immediate"      () h-int11  f-i11w)

(dnop p11b  "11bit byte align address"        () h-addr   f-p11b)
(dnop p11h  "11bit half-word align address"   () h-addr   f-p11h)
(dnop p11w  "11bit word align address"        () h-addr   f-p11w)

(dnop ci16  "16bit immediate for CI16"        () h-int16  f-ci16)
(dnop ci16w "16bit word align imm for CI16"   () h-int16  f-ci16w)

(dnop p16   "16bit absolute unsigned address" () h-iaddr  f-p16)
(dnop up16r "16bit relative unsigned address" () h-iaddr  f-up16r)
(dnop p16r  "16bit relative address"          () h-iaddr  f-p16r)

(define-operand (name i16l)
  (comment "16 bit immediate, lo")
  (attrs)
  (type h-int16)
  (index f-i16)
  (handlers (parse "lo16"))
)
(define-operand (name ui16l)
  (comment "16 bit unsigned immediate, lo")
  (attrs)
  (type h-uint16)
  (index f-ui16)
  (handlers (parse "ulo16"))
)
(define-operand (name i16h)
  (comment "16 bit immediate, hi")
  (attrs)
  (type h-uint16)
  (index f-ui16)
  (handlers (parse "hi16"))
)

; Instructions Macro

; O2 Format
(define-pmacro (o2-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd rs)
	 ()
	 ()
	 )
    )
)
; O2-I11 Format
(define-pmacro (o2-i11-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd rs)
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " reg/imm11")
	 () 
	 (.str mnemonic " $rd,$i11")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 i11 rd)
	 ()
	 ()
	 )
    )
)
; O2-I11 Unsigned Format
(define-pmacro (o2-ui11-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd rs)
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " reg/uimm11")
	 () 
	 (.str mnemonic " $rd,$ui11")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 ui11 rd)
	 ()
	 ()
	 )
    )
)
; O2-I11 Word Align Immediate Format (for movepc)
(define-pmacro (o2-i11w-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd rs)
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " reg/imm11_word")
	 () 
	 (.str mnemonic " $rd,$i11w")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 i11w rd)
	 ()
	 ()
	 )
    )
)
; O2-I11 Byte Align Address Format
(define-pmacro (o2-p11b-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 DISP_0 rd rs)
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " reg/addr11_byte")
	 () 
	 (.str mnemonic " $rd,$p11b")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 p11b rd)
	 ()
	 ()
	 )
    )
)
; O2 with Byte Align Displacement Format
(define-pmacro (o2dispb-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg/disp6")
	 ()
	 (.str mnemonic " $rd,$rs,$d6b")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 d6b rd rs)
	 ()
	 ()
	 )
    )
)
; O2-I11 Half-word Align Address Format
(define-pmacro (o2-p11h-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd rs)
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " reg/addr11_halfword")
	 () 
	 (.str mnemonic " $rd,$p11h")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 p11h rd)
	 ()
	 ()
	 )
    )
)
; O2 with Half-word Align Displacement Format
(define-pmacro (o2disph-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg/disp6_halfword")
	 ()
	 (.str mnemonic " $rd,$rs,$d6h")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 d6h rd rs)
	 ()
	 ()
	 )
    )
)
; O2-I11 Word Align Address Format
(define-pmacro (o2-p11w-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg")
	 ()
	 (.str mnemonic " $rd,$rs")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd rs)
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " reg/addr11_word")
	 () 
	 (.str mnemonic " $rd,$p11w")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 p11w rd)
	 ()
	 ()
	 )
    )
)
; O2 with Word Align Displacement Format
(define-pmacro (o2dispw-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/reg/disp6_word")
	 ()
	 (.str mnemonic " $rd,$rs,$d6w")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 d6w rd rs)
	 ()
	 ()
	 )
    )
)
; O1 Format
(define-pmacro (o1-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg")
	 ()
	 (.str mnemonic " $rd")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd (f-reserve3 0))
	 ()
	 ()
	 )
    )
)
; O1-I11 Unsigned Format
(define-pmacro (o1-ui11-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg")
	 ()
	 (.str mnemonic " $rd")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd (f-reserve3 0))
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " uimm11")
	 () 
	 (.str mnemonic " $ui11")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 (f-reserve2 0) ui11)
	 ()
	 ()
	 )
    )
)
; O1-CI16 Format
(define-pmacro (o1-ci16-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg")
	 ()
	 (.str mnemonic " $rd")
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) rd (f-reserve3 0))
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " imm16")
	 ()
	 (.str mnemonic " $ci16")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 ci16)
	 ()
	 ()
	 )
    )
)
; I11 Format
(define-pmacro (i11-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/imm11")
	 () 
	 (.str mnemonic " $rd,$i11")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 i11 rd)
	 ()
	 ()
	 )
    )
)
; I11 Unsigned Format
(define-pmacro (ui11-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/uimm11")
	 () 
	 (.str mnemonic " $rd,$ui11")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 ui11 rd)
	 ()
	 ()
	 )
    )
)
; I16 Format
(define-pmacro (i16l-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/imm16")
	 ()
	 (.str mnemonic " $rd,$i16l")
	 (+ EXT_0 opcode i16l rd)
	 ()
	 ()
	 )
    )
)
(define-pmacro (i16h-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/imm16")
	 ()
	 (.str mnemonic " $rd,$i16h")
	 (+ EXT_0 opcode i16h rd)
	 ()
	 ()
	 )
    )
)
; I16 Unsigned Format
(define-pmacro (ui16l-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/uimm16")
	 ()
	 (.str mnemonic " $rd,$ui16l")
	 (+ EXT_0 opcode ui16l rd)
	 ()
	 ()
	 )
    )
)
; C Format
(define-pmacro (c-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic)
	 ()
	 (.str mnemonic)
	 (+ EXT_0 opcode ISIMM_0 AFE_0 (f-reserve1 0) (f-reserve2 0) (f-reserve3 0))
	 ()
	 ()
	 )
    )
)
; CI16 Word Align Address Format
(define-pmacro (ci16w-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " addr16_word")
	 ()
	 (.str mnemonic " $ci16w")
	 (+ EXT_0 opcode ISIMM_1 AFE_0 ci16w)
	 ()
	 ()
	 )
    )
)
; JO1, JI16 (JMP) Format, absolute address
(define-pmacro (b-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/cc")
	 ()
	 (.str mnemonic " $rd,$cc")
	 (+ EXT_0 opcode ISIMM_0 cc (f-reserve1 0) rd (f-reserve3 0))
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " uaddr16/cc")
	 () 
	 (.str mnemonic " $p16,$cc")
	 (+ EXT_0 opcode ISIMM_1 cc p16)
	 ()
	 ()
	 )
    )
)
; JO1, JI16 (JMP) Format, unsigned PC relative
(define-pmacro (bur-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/cc")
	 ()
	 (.str mnemonic " $rd,$cc")
	 (+ EXT_0 opcode ISIMM_0 cc (f-reserve1 0) rd (f-reserve3 0))
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " uaddr16 (PC relative)/cc")
	 () 
	 (.str mnemonic " $up16r,$cc")
	 (+ EXT_0 opcode ISIMM_1 cc up16r)
	 ()
	 ()
	 )
    )
)
; JO1, JI16 (JMP) Format, signed PC relative
(define-pmacro (br-op mnemonic opcode)
  (begin
    (dni mnemonic
	 (.str mnemonic " reg/cc")
	 ()
	 (.str mnemonic " $rd,$cc")
	 (+ EXT_0 opcode ISIMM_0 cc (f-reserve1 0) rd (f-reserve3 0))	
	 ()
	 ()
	 )
    (dni (.sym mnemonic "i")
	 (.str mnemonic " addr16 (PC relative)/cc")
	 () 
	 (.str mnemonic " $p16r,$cc")
	 (+ EXT_0 opcode ISIMM_1 cc p16r)
	 ()
	 ()
	 )
    )
)

; Instructions

; Arithmetic
(o2-i11-op  add             OP_0)
(o2-i11-op  sub             OP_1)
(o2-i11-op  mull            OP_2)
(o2-i11-op  mulh            OP_3)
(o2-ui11-op udiv            OP_4)
(o2-ui11-op umod            OP_5)
(o2-i11-op  cmp             OP_6)
(o2-i11-op  div             OP_7)
(o2-i11-op  mod             OP_8)
(o2-op      neg             OP_9)
(o2-ui11-op umull           OP_10)
(o2-ui11-op umulh           OP_11)
;; 12, 13
(o2-op      addc            OP_14)
;; 15
(o2-op      inc             OP_16)
(o2-op      dec             OP_17)
;; 18
(o2-i11-op  max             OP_19)
(o2-i11-op  min             OP_20)
(o2-ui11-op umax            OP_21)
(o2-ui11-op umin            OP_22)
;; 23 - 27
(o2-op      sext8           OP_28)
(o2-op      sext16          OP_29)
;; 30 - 32

; Floating
;; 32 - 63

; Shift
(o2-ui11-op shl             OP_64)
(o2-ui11-op shr             OP_65)
;; 66 - 68
(o2-ui11-op sar             OP_69)
;; 70 - 71
(o2-ui11-op rol             OP_72)
(o2-ui11-op ror             OP_73)
;; 74 - 95

; Logic
(o2-op      and             OP_96)
(o2-op      or              OP_97)
(o2-op      xor             OP_98)
(o2-op      not             OP_99)
(o2-op      nand            OP_100)
(o2-op      nor             OP_101)
(o2-op      xnor            OP_102)
(o2-op      test            OP_103)
;; 104 - 105
(ui16l-op   wl16            OP_106)
(i16h-op    wh16            OP_107)
(ui11-op    clrb            OP_108)
(ui11-op    setb            OP_109)
(o1-op      clr             OP_110)
(o1-op      set             OP_111)
(o2-op      revb            OP_112)
(o2-op      rev8            OP_113)
(o2-ui11-op getb            OP_114)
(o2-ui11-op get8            OP_115)
;; 116 - 117
(i16l-op    lil             OP_118)
(i16h-op    lih             OP_119)
;; 120 - 121
(ui16l-op   ulil            OP_122)
;; 120 - 127

; Memory Access
(o2-p11b-op ld8             OP_128)
(o2-p11h-op ld16            OP_129)
(o2-p11w-op ld32            OP_130)
(o2-p11b-op st8             OP_131)
(o2-p11h-op st16            OP_132)
(o2-p11w-op st32            OP_133)
;; 134 - 135
(o1-ci16-op push            OP_136)
(c-op       pushpc          OP_137)
;; 138 - 143
(o1-op      pop             OP_144)
;; 145 - 159
(o2dispb-op ldd8            OP_154)
(o2disph-op ldd16           OP_155)
(o2dispw-op ldd32           OP_156)
(o2dispb-op std8            OP_157)
(o2disph-op std16           OP_158)
(o2dispw-op std32           OP_159)

; Branch
(bur-op     bur             OP_160)
(br-op      br              OP_161)
(b-op       b               OP_162)
(c-op       ib              OP_163)
;; 164 - 175
(bur-op     burn            OP_176)
(br-op      brn             OP_177)
(b-op       bn              OP_178)
;; 179 - 191

; System Read
(o1-op      srspr           OP_192)
(o1-op      srpdtr          OP_193)
(o1-op      srpidr          OP_194)
(o1-op      srcidr          OP_195)
(o1-op      srmoder         OP_196)
(o1-op      srieir          OP_197)
;(o1-op     srtisr          OP_198)
;(o1-op     srkpdtr         OP_199)
(o1-op      srtisr          OP_200)
(o1-op      srkpdtr         OP_201)
(o1-op      srmmur          OP_202)
(o1-op      sriosr          OP_203)
(o1-op      srtidr          OP_204)
(o1-op      srppsr          OP_205)
(o1-op      srppcr          OP_206)
(o1-op      sruspr          OP_207)
(o1-op      srppdtr         OP_208)
(o1-op      srptidr         OP_209)
;; 210      sridtr
(o1-op      srpsr           OP_211)
(c-op       srfrcr          OP_212)
(o1-op      srfrclr         OP_213)
(o1-op      srfrchr         OP_214)
(o1-op      srpflagr        OP_215)
(o1-op      srfi0r          OP_216)
(o1-op      srfi1r          OP_217)
;; 218 - 223

; System Write
(o1-op      srspw           OP_224)
(o1-op      srpdtw          OP_225)
;; 226      srpidw
;; 227      srcidw
;; 228      srmodew
(o1-ui11-op srieiw          OP_229)
;(o1-op     srsieiw         OP_230)
;(o1-op     srhieiw         OP_231)
(o1-op      srtisw          OP_232)
(o1-op      srkpdtw         OP_233)
(o1-ui11-op srmmuw          OP_234)
;; 235      sriosw
;; 236      srtidw
(o1-op      srppsw          OP_237)
(o1-op      srppcw          OP_238)
(o1-op      sruspw          OP_239)
(o1-op      srppdtw         OP_240)
(o1-op      srptidw         OP_241)
(o1-op      sridtw          OP_242)
(o1-op      srpsw           OP_243)
(c-op       srfrcw          OP_244)
(o1-op      srfrclw         OP_245)
(o1-op      srfrchw         OP_246)
(o1-op      srpflagw        OP_247)
;; 248 - 254
(ci16w-op   srspadd         OP_255)

; Other
(c-op       nop             OP_256)
(c-op       halt            OP_257)
(o2-op      move            OP_258)
(o2-i11w-op movepc          OP_259)
;; 260 - 287

; OS Support
(o1-ui11-op swi             OP_288)
(o2-p11w-op tas             OP_289)
(c-op       idts            OP_290)
;; 291      ldl
;; 292      stc
